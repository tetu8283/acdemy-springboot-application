<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.springbootapplication.mapper.UsersMapper">
    
    <!-- ResultMapの定義 -->
    <resultMap id="UserResultMap" type="com.spring.springbootapplication.entity.Users">
        <id property="userId" column="user_id" />
        <result property="userName" column="user_name" />
        <result property="mailAddress" column="mail_address" />
        <result property="password" column="password" />
        <result property="selfIntroduction" column="self_introduction" />
        <result property="profileImageData" column="profile_image_data" />
    </resultMap>
    
    <!-- すべてのユーザーを取得 -->
    <select id="findAll" resultMap="UserResultMap">
        SELECT user_id, user_name, mail_address, password, self_introduction, profile_image_data 
        FROM Users
    </select>
    
    <!-- ユーザーを検索して、メールアドレスとパスワードが一致したものを取得 (ログイン処理) -->
    <select id="findByMailAddressAndPassword" parameterType="map" resultMap="UserResultMap">
        SELECT user_id, user_name, mail_address, password, self_introduction, profile_image_data 
        FROM Users 
        WHERE mail_address = #{mailAddress} AND password = #{password}
    </select>

    <!-- メールアドレスでユーザーを検索 -->
    <select id="findByMailAddress" parameterType="string" resultMap="UserResultMap">
        SELECT user_id, user_name, mail_address, password, self_introduction, profile_image_data 
        FROM Users 
        WHERE mail_address = #{mailAddress}
    </select>

    <!-- idでユーザーを検索(editで使用) -->
    <select id="findById" parameterType="Integer" resultMap="UserResultMap">
        SELECT user_id, user_name, mail_address, password, self_introduction, profile_image_data 
        FROM Users 
        WHERE user_id = #{userId}
    </select>
    
    <!-- 新しいユーザーを挿入 -->
    <insert id="insert" parameterType="com.spring.springbootapplication.entity.Users">
        INSERT INTO Users(user_name, mail_address, password, self_introduction, profile_image_data) 
        VALUES(#{userName}, #{mailAddress}, #{password}, #{selfIntroduction}, #{profileImageData})
    </insert>
    
    <!-- ユーザー情報を更新 -->
    <update id="update" parameterType="com.spring.springbootapplication.entity.Users">
        UPDATE Users 
        SET self_introduction=#{selfIntroduction}, profile_image_data=#{profileImageData}
        WHERE user_id = #{userId}
    </update>
    
    <!-- ユーザーを削除 -->
    <delete id="delete" parameterType="Integer">
        DELETE FROM Users WHERE user_id = #{userId}
    </delete>
</mapper>
